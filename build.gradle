buildscript {
    ext {
        //profile
        if (project.hasProperty("projectEnv")) {
            projectEnv = project["projectEnv"]
        } else {
            projectEnv = "dev"
        }
        println "total project environment:" + projectEnv
        //插件版本
        springBootVersion = "2.0.0.RELEASE"
        dependencyVersion = "1.0.4.RELEASE"
        gradleDockerVersion = "1.2"
        gradleNodeVersion = "1.2.0"
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/repositories/central/" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                "io.spring.gradle:dependency-management-plugin:${dependencyVersion}",
                "se.transmode.gradle:gradle-docker:${gradleDockerVersion}",
                "com.moowork.gradle:gradle-node-plugin:${gradleNodeVersion}"
        )
    }
}

//配置所有的子Project的公共部分（不包含root Project）
subprojects {
    ext {
        separator = File.separator
        rootProjectPath = project.getRootDir().getPath() + separator;
        subprojectPath = project.getProjectDir().getPath() + separator;
    }

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    group "com.fewok"
    version "0.0.1-SNAPSHOT"
    description project.name

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    /*解决设置版本不起作用问题*/
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8// 设置 JDK 版本
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/repositories/central/" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    //修改默认的依赖版本
    ext {
//        ext["json.version"] = "20180130"
//        ext["caffeine.version"] = "2.6.2"

    }
    //依赖管理（依赖版本管理）
    dependencyManagement {
        dependencies {
            dependency "cglib:cglib:3.2.6"

            dependency "javax.servlet:javax.servlet-api:4.0.0"
            dependencySet(group: "io.undertow", version: "2.0.1.Final") {
                entry "undertow-core"
                entry "undertow-servlet"
                entry "undertow-websockets-jsr"
            }

            //JSON
            dependency "org.json:json:20180130"
            dependency "com.alibaba:fastjson:1.2.46"

            //log4j2日志
            dependency "com.lmax:disruptor:3.4.0"
            dependency "org.slf4j:slf4j-api:1.7.25"
            dependencySet(group: "org.apache.logging.log4j", version: "2.10.0") {
                entry "log4j-api"
                entry "log4j-core"
                entry "log4j-1.2-api"
                entry "log4j-slf4j-impl"
                entry "log4j-web"
            }

            //http处理
            dependencySet(group: "com.squareup.okhttp3", version: "3.10.0") {
                entry "okhttp"
                entry "mockwebserver"
            }
            //http处理
            dependencySet(group: "io.github.openfeign", version: "9.5.1") {
                entry "feign-okhttp"
                entry "feign-slf4j"
            }

            //mysql数据库
            dependency "mysql:mysql-connector-java:6.0.6"
            dependency "com.zaxxer:HikariCP:2.7.8"
//            dependencySet(group: "org.apache.tomcat", version: "9.0.5") {
//                entry "tomcat-jdbc"
//                entry "tomcat-annotations-api"
//            }
            dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1"
            dependency "com.github.pagehelper:pagehelper:5.1.2"

            dependency "io.reactivex.rxjava2:rxjava:2.1.10"
            //协程
            dependency "co.paralleluniverse:quasar-core:0.7.9"

            //http接口文档
            dependency "io.springfox:springfox-swagger2:2.8.0"
            dependency "io.springfox:springfox-swagger-ui:2.8.0"

            //内置缓存
            dependency "com.github.ben-manes.caffeine:caffeine:2.6.2"

            //对象深复制
            "ma.glasnost.orika:orika-core:1.5.2"
            //通用工具
            dependency "com.google.guava:guava:24.0-jre"
            dependency "commons-io:commons-io:2.6"
            dependency "commons-fileupload:commons-fileupload:1.3.3"
            dependency "org.apache.commons:commons-lang3:3.7"
            dependency "org.apache.commons:commons-collections4:4.1"

            //xml处理
            dependency "javax.xml.bind:jaxb-api:2.3.0"
            //excel处理
            dependency "org.apache.poi:poi:3.17"
            //csv处理
            dependency "com.opencsv:opencsv:4.1"

            dependency "org.testng:testng:6.14.2"
        }
    }

    //依赖排除
    configurations {
        all*.exclude module: "spring-boot-starter-tomcat"
        all*.exclude module: "spring-boot-starter-logging"
        all*.exclude group: "commons-logging", module: "commons-logging"
        all*.exclude group: "log4j", module: "log4j"
        all*.exclude group: "org.slf4j", module: "slf4j-jdk14"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.apache.logging.log4j", module: "log4j-jcl"
        all*.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        all*.exclude group: "org.slf4j", module: "slf4j-jcl"
        all*.exclude group: "ch.qos.logback", module: "logback-core"
        all*.exclude group: "ch.qos.logback", module: "logback-classic"

        all*.exclude group: "org.codehaus.jackson"
        all*.exclude group: "junit"
    }

    sourceSets {
        main {
            java {//指定java代码目录
                srcDir "${subprojectPath}main${separator}java"
                exclude "resources${separator}**"
            }
        }
    }

    //特殊依赖（需要每个模块都添加的依赖）
    dependencies {
        compileOnly(
                "org.projectlombok:lombok"
        )
    }

    //增量编译
    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    //是否自动下载依赖源码和javadoc
    idea {
        module {
            downloadJavadoc = false
            downloadSources = false

            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/java/main/")
            testOutputDir = file("$buildDir/classes/java/test/")
        }
    }

    //强制使用gradle
    task wrapper(type: Wrapper) {
        gradleVersion = "4.6"
    }

    //清除out目录
//    clean {
//        delete file("${subprojectPath}out")
//    }
}