<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <settings>
        <!--1该配置影响的所有映射器中配置的缓存的全局开关-->
        <setting name="cacheEnabled" value="false"/>
        <!--2延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!--3当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--4是否允许单一语句返回多结果集（需要兼容驱动）-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--5使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果-->
        <setting name="useColumnLabel" value="true"/>
        <!--6允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）-->
        <setting name="useGeneratedKeys" value="true"/>
        <!--7指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）-->
        <setting name="autoMappingBehavior" value="FULL"/>
        <!--8指定行为,当检测到一个未知的列(或未知的属性类型)的自动映射的目标-->
        <setting name="autoMappingUnknownColumnBehavior" value="NONE"/>
        <!--9配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--10设置超时时间，它决定驱动等待数据库响应的秒数-->
        <setting name="defaultStatementTimeout" value="10000"/>
        <!--11设置驱动控制获取返回结果的大小。这个参数值可以覆盖一个查询设置-->
        <!--<setting name="defaultFetchSize" value="null"/>-->
        <!--12允许在嵌套语句中使用分页（RowBounds）。 If allow, set the false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--13允许在嵌套语句中使用分页（ResultHandler）。 If allow, set the false-->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!--14是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--15MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="STATEMENT"/>
        <!--16当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER-->
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!--17指定哪个对象的方法触发一次延迟加载-->
        <!--<setting name="lazyLoadTriggerMethods" value="clone"/>-->
        <!--18指定动态 SQL 生成的默认语言-->
        <!--<setting name="defaultScriptingLanguage" value=""/>-->
        <!--19指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="true"/>
        <!--20指定 MyBatis 增加到日志名称的前缀-->
        <!--<setting name="logPrefix" value="mybatis "/>-->
        <!--21指定 MyBatis 所用日志的具体实现，未指定时将自动查找-->
        <setting name="logImpl" value="LOG4J2"/>
        <!--22指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具-->
        <!--<setting name="proxyFactory" value="JAVASSIST"/>-->
        <!--23Specifies VFS implementations-->
        <!--<setting name="vfsImpl" value=""/>-->
        <!--24允许引用语句参数的实际的方法签名中声明的名字。要使用该功能,您的项目必须编译Java 8中参数的选择-->
        <!--<setting name="useActualParamName" value="true"/>-->
    </settings>
</configuration>